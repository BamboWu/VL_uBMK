project(VL_uBMK)

cmake_minimum_required(VERSION 3.1)

# check boost libraries
find_package(Boost QUIET COMPONENTS atomic thread chrono)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})

# check whether there is an alternative GNU atomic library
if(NOT Boost_ATOMIC_FOUND)
  find_package(GccAtomic QUIET)
endif()

find_file(Boost_LOCKFREE_QUEUE_HPP "boost/lockfree/queue.hpp")

if(NOT (Boost_ATOMIC_FOUND OR GCCLIBATOMIC_FOUND))
  MESSAGE(STATUS "WARNING: No atomic library, skip pingpong.")
elseif(NOT Boost_LOCKFREE_QUEUE_HPP)
  MESSAGE(STATUS "WARNING: No boost/lockfree/queue.hpp, skip pingpong.")
else()
  add_microbenchmark(pingpong pingpong.cpp)
  target_link_libraries(pingpong ${Boost_LIBRARIES})
  if(NOT Boost_ATOMIC_FOUND)
    target_compile_definitions(pingpong PRIVATE -DSTDATOMIC)
    target_link_libraries(pingpong atomic)
  endif()
  if(NOT Boost_THREAD_FOUND)
    # fall back to use pthread library find in the top CMakeLists.txt
    target_compile_definitions(pingpong PRIVATE -DSTDTHREAD)
  endif()
  if(NOT Boost_CHRONO_FOUND)
    target_compile_definitions(pingpong PRIVATE -DSTDCHRONO)
  endif()
endif()

#if(Boost_ATOMIC_FOUND)
#  include_directories(${Boost_INCLUDE_DIRS})
#  link_directories(${Boost_LIBRARY_DIRS})
#  add_microbenchmark(pingpong pingpong.cpp)
#  target_link_libraries(pingpong ${Boost_LIBRARIES})
#elseif(GCCLIBATOMIC_FOUND)
#  find_file(Boost_LOCKFREE_QUEUE_HPP "boost/lockfree/queue.hpp"
#            PATHS ${Boost_INCLUDE_DIRS})
#  if(Boost_LOCKFREE_QUEUE_HPP)
#    include_directories(${Boost_INCLUDE_DIRS})
#    add_microbenchmark(pingpong pingpong.cpp)
#    set_target_properties(pingpong PROPERTIES COMPILE_DEFINITIONS "GCCATOMIC")
#    target_link_libraries(pingpong atomic)
#  else(Boost_LOCKFREE_QUEUE_HPP)
#    MESSAGE(STATUS "WARNING: No boost/lockfree/queue.hpp, skip pingpong.")
#  endif(Boost_LOCKFREE_QUEUE_HPP)
#else()
#  MESSAGE(STATUS "WARNING: No atomic library, skip pingpong.")
#endif()
