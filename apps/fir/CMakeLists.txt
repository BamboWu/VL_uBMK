project(VL_uBMK)

cmake_minimum_required(VERSION 3.1)

if (Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIRS})
endif()

if(VL_FOUND)
  include_directories(${VL_INCLUDE_DIR})
endif()

find_file(Boost_LOCKFREE_QUEUE_HPP "boost/lockfree/queue.hpp" ${Boost_INCLUDE_DIRS})

if(NOT (Boost_ATOMIC_FOUND OR GCCLIBATOMIC_FOUND))
  MESSAGE(STATUS "WARNING: No atomic library, skip fir.")
else()
  if(NOT Boost_FOUND OR NOT Boost_LOCKFREE_QUEUE_HPP)
    MESSAGE(STATUS "WARNING: No boost/lockfree/queue.hpp, skip fir_boost.")
  else()
    add_boostable_microbmk(fir_boost fir.cpp)
  endif(NOT Boost_FOUND OR NOT Boost_LOCKFREE_QUEUE_HPP)
  if(ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND)
    add_boostable_microbmk(fir_zmq fir.cpp)
    target_compile_definitions(fir_zmq PRIVATE -DZMQ)
    target_include_directories(fir_zmq PRIVATE ${ZMQ_INCLUDE_DIR})
    target_link_libraries(fir_zmq ${ZMQ_LIBRARY})
    if (ZMQ_STATIC_FOUND)
      target_compile_options(fir_zmq PRIVATE -static -pthread)
    endif()
  elseif(NOT (ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND))
    MESSAGE(STATUS "WARNING: No zmq library, skip fir_zmq.")
  endif()
  if(NOT VL_FOUND)
    MESSAGE(STATUS "WARNING: No libvl found, skip fir_vl.")
  else()
    add_boostable_microbmk(fir_vl fir.cpp)
    target_compile_definitions(fir_vl PRIVATE -DVL)
    target_link_libraries(fir_vl ${VL_LIBRARY})
    add_boostable_microbmk(fir_verbose fir.cpp)
    target_compile_definitions(fir_verbose PRIVATE -DVL -DVERBOSE)
    target_link_libraries(fir_verbose ${VL_LIBRARY})
    add_boostable_microbmk(fir_il fir.cpp)
    target_link_libraries(fir_il ${VLI_LIBRARY})
    target_compile_definitions(fir_il PRIVATE -DVL -DVLINLINE -DNOSYSVL)
  endif(NOT VL_FOUND)
endif()
