project(VL_uBMK)

cmake_minimum_required(VERSION 3.1)

if (Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIRS})
endif()

if(VL_FOUND)
  include_directories(${VL_INCLUDE_DIR})
endif()
if(CAF_FOUND)
  include_directories(${CAF_INCLUDE_DIR})
endif()

if(NOT (Boost_ATOMIC_FOUND OR GCCLIBATOMIC_FOUND))
  MESSAGE(STATUS "WARNING: No atomic library, skip fir.")
else()
  if(NOT Boost_FOUND OR NOT Boost_LOCKFREE_QUEUE_HPP)
    MESSAGE(STATUS "WARNING: No boost/lockfree/queue.hpp, skip fir_boost.")
  else()
    add_boostable_microbmk(fir_boost fir.cpp)
  endif(NOT Boost_FOUND OR NOT Boost_LOCKFREE_QUEUE_HPP)
  if(ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND)
    add_boostable_microbmk(fir_zmq fir.cpp)
    target_compile_definitions(fir_zmq PRIVATE -DZMQ)
    target_include_directories(fir_zmq PRIVATE ${ZMQ_INCLUDE_DIR})
    target_link_libraries(fir_zmq ${ZMQ_LIBRARY})
    if (ZMQ_STATIC_FOUND)
      target_compile_options(fir_zmq PRIVATE -static -pthread)
    endif()
  elseif(NOT (ZMQ_STATIC_FOUND OR ZMQ_DYNAMIC_FOUND))
    MESSAGE(STATUS "WARNING: No zmq library, skip fir_zmq.")
  endif()
  if(NOT VL_FOUND)
    MESSAGE(STATUS "WARNING: No libvl found, skip fir_vl.")
  else()
    add_boostable_microbmk(fir_vl fir.cpp)
    target_compile_definitions(fir_vl PRIVATE -DVL)
    target_link_libraries(fir_vl ${VL_LIBRARY})
    add_boostable_microbmk(fir_verbose fir.cpp)
    target_compile_definitions(fir_verbose PRIVATE -DVL -DVERBOSE)
    target_link_libraries(fir_verbose ${VL_LIBRARY})
    add_boostable_microbmk(fir_il fir.cpp)
    target_link_libraries(fir_il ${VLI_LIBRARY})
    target_compile_definitions(fir_il PRIVATE -DVL -DVLINLINE -DNOSYSVL)
  endif(NOT VL_FOUND)
  if(NOT CAF_FOUND)
    MESSAGE(STATUS "WARNING: No libcaf found, skip fir_qmd.")
  else()
    add_boostable_microbmk(fir_qmd fir.cpp)
    target_compile_definitions(fir_qmd PRIVATE -DCAF)
    target_link_libraries(fir_qmd ${CAF_LIBRARY})
  endif(NOT CAF_FOUND)
endif()

if (NOT RaftLib_FOUND)
  MESSAGE(STATUS "WARNING: No RaftLib found, skip fir_rl.")
else (NOT RaftLib_FOUND)
  if (NOT QTHREAD_FOUND)
    MESSAGE(STATUS "WARNING: No qthread found, skip fir_qt.")
  else (NOT QTHREAD_FOUND)
    add_raftbenchmark(fir_qt_std_pw rl_fir.cpp)
    target_compile_definitions(fir_qt_std_pw PRIVATE -DUSE_QTHREAD=1)
    add_raftbenchmark(fir_qt_dyn_pw rl_fir.cpp)
    target_compile_definitions(fir_qt_dyn_pw PRIVATE -DUSE_QTHREAD=1
        -DARMQ_DYNAMIC_ALLOC=1)
    add_raftbenchmark(fir_qt_std_os rl_fir.cpp)
    target_compile_definitions(fir_qt_std_os PRIVATE -DUSE_QTHREAD=1
        -DRAFTLIB_ONESHOT=1)
    add_raftbenchmark(fir_qt_std_mix rl_fir.cpp)
    target_compile_definitions(fir_qt_std_mix PRIVATE -DUSE_QTHREAD=1
        -DRAFTLIB_MIX=1)
    add_raftbenchmark(fir_qt_dyn_mix rl_fir.cpp)
    target_compile_definitions(fir_qt_dyn_mix PRIVATE -DUSE_QTHREAD=1
        -DRAFTLIB_MIX=1 -DARMQ_DYNAMIC_ALLOC=1)
    add_custom_target(fir_qt)
    add_dependencies(fir_qt
                     fir_qt_std_pw fir_qt_dyn_pw fir_qt_std_os
                     fir_qt_std_mix fir_qt_dyn_mix)
    if (NOT COMPILER_SUPPORTS_CXX20)
      MESSAGE(STATUS "WARNING: No C++20 support, skip fir_qt_*_orig")
    else (NOT COMPILER_SUPPORTS_CXX20)
      add_raftbenchmark(fir_qt_std_orig rl_fir.cpp)
      target_compile_definitions(fir_qt_std_orig PRIVATE -DRAFTLIB_ORIG=1
          -DUSE_QTHREAD=1 -DSTDALLOC=1)
      add_raftbenchmark(fir_qt_dyn_orig rl_fir.cpp)
      target_compile_definitions(fir_qt_dyn_orig PRIVATE -DRAFTLIB_ORIG=1
          -DUSE_QTHREAD=1)
      if (NOT VL_FOUND)
        MESSAGE(STATUS "WARNING: No libvl found, skip fir_qt_vl_orig.")
      else()
        add_raftbenchmark(fir_qt_vl_orig rl_fir.cpp)
        target_compile_definitions(fir_qt_vl_orig PRIVATE -DRAFTLIB_ORIG=1
            -DUSE_QTHREAD=1 -DVL=1)
        target_link_libraries(fir_qt_vl_orig ${VL_LIBRARY})
      endif()
    endif (NOT COMPILER_SUPPORTS_CXX20)
  endif(NOT QTHREAD_FOUND)
  if (NOT UT_FOUND)
    MESSAGE(STATUS "WARNING: No libut found, skip fir_ut.")
  else (NOT UT_FOUND)
    add_raftbenchmark(fir_ut_std_pw rl_fir.cpp)
    target_compile_definitions(fir_ut_std_pw PRIVATE -DUSE_UT=1)
    add_raftbenchmark(fir_ut_dyn_pw rl_fir.cpp)
    target_compile_definitions(fir_ut_dyn_pw PRIVATE -DUSE_UT=1
        -DARMQ_DYNAMIC_ALLOC=1)
    add_raftbenchmark(fir_ut_std_cv rl_fir.cpp)
    target_compile_definitions(fir_ut_std_cv PRIVATE -DUSE_UT=1
        -DRAFTLIB_CV=1)
    add_raftbenchmark(fir_ut_dyn_cv rl_fir.cpp)
    target_compile_definitions(fir_ut_dyn_cv PRIVATE -DUSE_UT=1
        -DRAFTLIB_CV=1 -DARMQ_DYNAMIC_ALLOC=1)
    add_raftbenchmark(fir_ut_std_os rl_fir.cpp)
    target_compile_definitions(fir_ut_std_os PRIVATE -DUSE_UT=1
        -DRAFTLIB_ONESHOT=1)
    add_raftbenchmark(fir_ut_std_mix rl_fir.cpp)
    target_compile_definitions(fir_ut_std_mix PRIVATE -DUSE_UT=1
        -DRAFTLIB_MIX=1)
    add_raftbenchmark(fir_ut_dyn_mix rl_fir.cpp)
    target_compile_definitions(fir_ut_dyn_mix PRIVATE -DUSE_UT=1
        -DRAFTLIB_MIX=1 -DARMQ_DYNAMIC_ALLOC=1)
    add_custom_target(fir_ut)
    add_dependencies(fir_ut
                     fir_ut_std_pw fir_ut_dyn_pw fir_ut_std_cv
                     fir_ut_dyn_cv fir_ut_std_os fir_ut_std_mix
                     fir_ut_dyn_mix)
    if (NOT COMPILER_SUPPORTS_CXX20)
      MESSAGE(STATUS "WARNING: No C++20 support, skip fir_ut_*_orig")
    else (NOT COMPILER_SUPPORTS_CXX20)
      add_raftbenchmark(fir_ut_std_orig rl_fir.cpp)
      target_compile_definitions(fir_ut_std_orig PRIVATE -DRAFTLIB_ORIG=1
          -DUSE_UT=1 -DSTDALLOC=1)
      add_raftbenchmark(fir_ut_dyn_orig rl_fir.cpp)
      target_compile_definitions(fir_ut_dyn_orig PRIVATE -DRAFTLIB_ORIG=1
          -DUSE_UT=1)
      if (NOT VL_FOUND)
        MESSAGE(STATUS "WARNING: No libvl found, skip fir_ut_vl_orig.")
      else()
        add_raftbenchmark(fir_ut_vl_orig rl_fir.cpp)
        target_compile_definitions(fir_ut_vl_orig PRIVATE -DRAFTLIB_ORIG=1
            -DUSE_UT=1 -DVL=1)
        target_link_libraries(fir_ut_vl_orig ${VL_LIBRARY})
      endif()
    endif (NOT COMPILER_SUPPORTS_CXX20)
  endif(NOT UT_FOUND)
endif()
